version: "3.9"

services:
  # Banco de metadados do Airflow
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - spark-network

  # Spark Master
  spark-master:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-master
    environment:
      SPARK_MODE: master
      SPARK_MASTER_HOST: spark-master
      SPARK_MASTER_PORT: "7077"
      SPARK_MASTER_WEBUI_PORT: "8080"
    volumes:
      - ./airflow/.storage:/opt/airflow/.storage
    ports:
      - "8081:8080"   # UI do Spark Master (externo 8081 -> interno 8080)
      - "7077:7077"   # Porta RPC do master
    restart: unless-stopped
    networks:
      - spark-network

  # Spark Worker 1
  spark-worker-1:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-worker-1
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_CORES: "2"
      SPARK_WORKER_MEMORY: "2G"
      SPARK_WORKER_WEBUI_PORT: "8081"
    volumes:
      - ./airflow/.storage:/opt/airflow/.storage
    depends_on:
      - spark-master
    restart: unless-stopped
    networks:
      - spark-network

  # (Opcional) Spark Worker 2
  spark-worker-2:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-worker-2
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_CORES: "2"
      SPARK_WORKER_MEMORY: "2G"
      SPARK_WORKER_WEBUI_PORT: "8082"
    volumes:
      - ./airflow/.storage:/opt/airflow/.storage
    depends_on:
      - spark-master
    restart: unless-stopped
    networks:
      - spark-network

  # Inicialização do Airflow (migrar DB e criar usuário)
  airflow-init:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow-init
    environment:
      AIRFLOW_HOME: /opt/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__FERNET_KEY: "change_me_generate_with_openssl"  # Substitua por um base64 de 32 bytes
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      # Conexão padrão para SparkSubmitOperator
      AIRFLOW_CONN_SPARK_DEFAULT: "spark://spark-master:7077"
    user: "50000:0"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./airflow/.storage:/opt/airflow/.storage
      - ./plugins:/opt/airflow/plugins
      - ./jars:/opt/airflow/jars
    depends_on:
      - postgres
      - spark-master
    entrypoint: /bin/bash
    command: -c "
      airflow db migrate &&
      airflow users create \
        --username admin \
        --firstname Admin \
        --lastname User \
        --role Admin \
        --email admin@example.com \
        --password admin || true"
    restart: "no"
    networks:
      - spark-network

  # Scheduler (executa as tasks no LocalExecutor)
  airflow-scheduler:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow-scheduler
    environment:
      AIRFLOW_HOME: /opt/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__FERNET_KEY: "change_me_generate_with_openssl"
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW_CONN_SPARK_DEFAULT: "spark://spark-master:7077"
    user: "50000:0"
    depends_on:
      - postgres
      - spark-master
      - airflow-init
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./airflow/.storage:/opt/airflow/.storage
      - ./plugins:/opt/airflow/plugins
      - ./jars:/opt/airflow/jars
    command: ["airflow", "scheduler"]
    restart: unless-stopped
    networks:
      - spark-network

  # Webserver
  airflow-webserver:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow-webserver
    environment:
      AIRFLOW_HOME: /opt/airflow
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__FERNET_KEY: "change_me_generate_with_openssl"
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW_CONN_SPARK_DEFAULT: "spark://spark-master:7077"
    user: "50000:0"
    depends_on:
      - airflow-scheduler
    ports:
      - "8088:8080"   # UI do Airflow em http://localhost:8088
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./airflow/.storage:/opt/airflow/.storage
      - ./plugins:/opt/airflow/plugins
      - ./jars:/opt/airflow/jars
    command: ["airflow", "webserver"]
    restart: unless-stopped
    networks:
      - spark-network

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - ./airflow/.storage/minio-data:/data
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - spark-network

volumes:
  postgres_data:

networks:
  spark-network:
    driver: bridge